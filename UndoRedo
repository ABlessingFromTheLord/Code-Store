# global text document
var textdoc = "";

# do not change this class
class Action
{
public:
	function exec()
	{
		# override in subclasses
	}
	function undo()
	{
		# override in subclasses
	}
}

# do not change this class
class History
{
public:
	function exec(action)
	{
		if not Type.isOfType(action, Action) then throw "History.exec: invalid parameter type";
		actions = actions[0:current];
		action.exec();
		actions.push(action);
		current += 1;
	}
	function undo()
	{
		if current == 0 then throw "no action to undo";
		current -= 1;
		actions[current].undo();
	}
	function redo()
	{
		if current == actions.size() then throw "no action to redo";
		actions[current].exec();
		current += 1;
	}

private:
	var actions = [];   # list of actions, which can be undone
	var current = 0;    # actions[0:current] are done, the remaining ones are undone
}


function insert(input, pos, str){
    var result = "";
    
    for var i in (0: input.size()) do{
        if(i == pos) then {
            result += str;
        }
        result += String.fromUnicode(input[i]);
    }
    return result;
}

function delete(input, pos, len){
    var result = "";
    
    for var i in (0 : input.size()) do{
        if(i >= pos and i < (pos + len)) then{
            continue;
        }
        result += String.fromUnicode(input[i]);
    }
    return result;
}

function overwrite(input, pos, s){
    var result = "";
    
    for var i in (0: input.size()) do{
        if(i == pos) then {
            result += s;           
            continue;
        }
        if( i > pos and i < pos + s.size()) then {
            continue;
        }
        result += String.fromUnicode(input[i]);
    }
    return result;
}



class InsertAction: Action
{
	private:
	var m_pos;
	var m_s;
	var m_bef;
	
	public:
	constructor(pos, s)
	{
		m_pos = pos;
		m_s = s;
		
		if(textdoc.size() > 0) then
		{
			m_bef = textdoc;
		}
		else
		{
			m_bef = "";
		}
	}
	
	function exec()
	{
		if(textdoc.size() > 0) then 
		{
			textdoc = insert(textdoc, m_pos, m_s);
		}
		else
		{
			textdoc = m_s;
		}
	}
	function undo()
	{
		textdoc = m_bef;
	}
}


class DeleteAction: Action
{
	private:
	var m_pos;
	var m_len;
	var m_bef = [];
	
	public:
	constructor(pos, len)
	{
		m_pos = pos;
		m_len = len;
		
		if(textdoc.size() > 0) then
		{
			m_bef = textdoc;
		}
		else
		{
			m_bef = "";
		}
		
	}
	
	function exec()
	{
		textdoc = delete(textdoc, m_pos, m_len);
	}
	function undo()
	{
		textdoc = m_bef;
	}
}


class OverwriteAction: Action
{
	private:
	var m_pos;
	var m_s;
	var m_bef = [];
	
	public:
	constructor(pos, s)
	{
		m_pos = pos;
		m_s = s;
		
		if(textdoc.size() > 0) then
		{
			m_bef = textdoc;
		}
		else
		{
			m_bef = "";
		}
	}
	
	function exec()
	{
		textdoc = overwrite(textdoc, m_pos, m_s);
	}
	
	function undo()
	{
		textdoc = m_bef;
	}
}


var history = History();
history.exec(InsertAction(0, "Hello, World"));
print(textdoc);                                   # "Hello, World"
history.exec(DeleteAction(5, 1));
print(textdoc);                                   # "Hello World"
history.undo();
print(textdoc);                                   # "Hello, World"
history.exec(OverwriteAction(1, "a"));
history.exec(OverwriteAction(8, "elt!"));
print(textdoc);                                   # "Hallo, Welt!"
history.undo();
history.undo();
print(textdoc);                                   # "Hello, World"
history.undo();
print(textdoc);                                   # ""
history.redo();
print(textdoc);                                   # "Hello, World"
history.redo();
history.redo();
print(textdoc);                                   # "Hallo, Welt!"
